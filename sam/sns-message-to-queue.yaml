AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Create an SNS topic and add a queue subscription

Parameters:
  Client:
    Type: String
    Description: Resource Tag
  Project:
    Type: String
    Description: A value to identify the project the resource supports
  Environment:
    Description: For example, use 'dev' or 'prd'
    Type: String
  BucketName:
    Type: String
    Description: Name of Bucket
  LambdaRoleArn:
    Type: String
    Description: ARN of lambda execution role
  FilterDomains:
    Type: CommaDelimitedList
  Suffix:
    Type: String

Resources:
  SamDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: Client
          Value: !Ref Client
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  SamQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30
      RedrivePolicy:
        maxReceiveCount: 2
        deadLetterTargetArn: !GetAtt SamDeadLetterQueue.Arn
      Tags:
        - Key: Client
          Value: !Ref Client
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  SamTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Client}-${Project}-experiment-${Environment}"
      Subscription:
        - Endpoint: !GetAtt SamQueue.Arn
          Protocol: sqs
      Tags:
        - Key: Client
          Value: !Ref Client
        - Key: Project
          Value: !Ref Project
        - Key: Environment
          Value: !Ref Environment

  SamQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SamTopic
      Queues:
        - !Ref SamQueue

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SamQueue.Arn
      Region: !Ref AWS::Region
      TopicArn: !GetAtt SamTopic.TopicArn
      FilterPolicyScope: MessageBody
      # FilterPolicy: '{"metadata":{"eventType":["ENROLLMENT_CREATED"]}}'
      FilterPolicy: 
        {
          "metadata": {
            "eventType": ["ENROLLMENT_CREATED"],
            "domain": !Ref FilterDomains
          }
        }

  SamEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      Timeout: 30
      CodeUri: sam-disco-lambdas/dist
      Handler: index.queueHandler
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          BUCKET: !Ref BucketName
          NODE_OPTIONS: --enable-source-maps
      Role: !Ref LambdaRoleArn
      Events:
        SamEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SamQueue.Arn
            BatchSize: 10
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        Target: "es2022"
        OutExtension:
          - .js=.mjs
        Sourcemap: true
        EntryPoints:
          - index.js
        External:
          - "@aws-sdk/client-s3"

Outputs:
  SamEventHandlerLambda:
    Description: Handler for queue events
    Value: !GetAtt SamEventHandler.Arn
  SamQueueArn:
    Description: Arn of Queue Created
    Value: !GetAtt SamQueue.Arn
  SamDeadLetterQueueArn:
    Description: Arn of Dead Letter Queue
    Value: !GetAtt SamDeadLetterQueue.Arn
